#!/bin/sh /etc/rc.common
#
# Copyright (C) 2019 marsocket <marsocket@gmail.com>
# This is free software, licensed under the GNU General Public License v3.

START=75
USE_PROCD=1
#PROCD_DEBUG=1

EXTRA_COMMANDS="configure rules auto_check auto_update"

REDIR_BIN="ss-redir"
TUNNEL_BIN="ss-tunnel"
SOCKS5_BIN="ss-local"
TCPDNS_BIN="dns-forwarder"
APNIC_BIN="marsocket-apnic"
GFWLIST_BIN="marsocket-gfwlist"
RULES_BIN="marsocket-rules"
CHECK_BIN="marsocket-check"
CONF_NAME="marsocket"
CRONTABS_CONF="/etc/crontabs/root"
DNSMASQ_CONF="/etc/dnsmasq.conf"
IPLIST_CONF_PATH="/etc/${CONF_NAME}/apnic.d"
DNSMASQ_CONF_PATH="/etc/${CONF_NAME}/dnsmasq.d"
TEMP_CONF_PATH="/var/etc/${CONF_NAME}"
APNIC_LATEST_FILE="/etc/${CONF_NAME}/apnic-latest"
GFWLIST_LATEST_FILE="/etc/${CONF_NAME}/gfwlist-latest"
GFWLIST_RULES_FILE="${DNSMASQ_CONF_PATH}/gfwlist.conf"
DNSMASQ_CONF_FILE="${DNSMASQ_CONF_PATH}/${CONF_NAME}.conf"
TEMP_GFWLIST_RULES_FILE="/tmp/gfwlist.conf.tmp"
TEMP_DNSMASQ_CONF_FILE="/tmp/${CONF_NAME}.conf.tmp"
DNSMASQ_CONF_ADD_LINE="conf-dir=${DNSMASQ_CONF_PATH}"

restart_dnsmasq() {
	/etc/init.d/dnsmasq restart	
}

check_depends() {
	command -v "$REDIR_BIN" >/dev/null || return 1
	command -v "$TUNNEL_BIN" >/dev/null || return 1
	command -v "$TCPDNS_BIN" >/dev/null || return 1	
	command -v "$RULES_BIN" >/dev/null || return 1
	command -v "$GFWLIST_BIN" >/dev/null || return 1
	command -v "$APNIC_BIN" >/dev/null || return 1
	mkdir -p "$DNSMASQ_CONF_PATH" "$IPLIST_CONF_PATH" "$TEMP_CONF_PATH" "/var/run"
	local tcp_tw_reuse=$(cat /proc/sys/net/ipv4/tcp_tw_reuse 2>/dev/null)
	local tcp_fastopen=$(cat /proc/sys/net/ipv4/tcp_fastopen 2>/dev/null)
	if [ "$tcp_tw_reuse" != "1" ]; then
		echo 1 > /proc/sys/net/ipv4/tcp_tw_reuse
	fi
	if [ "$tcp_fastopen" != "3" ]; then
		echo 3 > /proc/sys/net/ipv4/tcp_fastopen
	fi
	return 0
}

log() {
	local logtext=$1
	local logtime=$(date "+%Y-%m-%d %H:%M:%S")
	echo "[${logtime}] ${logtext}"
}

#$1 curfile
#$2 newfile
compare_md5() {
	local curfile=$1
	local newfile=$2
	if [ ! -f $curfile ] && [ -f $newfile ]; then
		mv $newfile $curfile
		return 1
	fi
	if [ -f $curfile ] && [ ! -f $newfile ]; then
		rm $curfile
		return 1
	fi
	if [ ! -f $curfile ] && [ ! -f $newfile ]; then
		return 0
	fi
	local cur_md5=$(md5sum "$curfile" | awk '{ print $1 }')
	local new_md5=$(md5sum "$newfile" | awk '{ print $1 }')
	if [ "$cur_md5" != "$new_md5" ]; then
		echo "$cur_md5 $curfile"
		echo "$new_md5 $newfile"
		mv $newfile $curfile
		return 1
	fi
	rm $newfile
	return 0
}

get_md5() {
	local dataname=$1
	case "$dataname" in
		apnic)
			echo $(ls ${APNIC_LATEST_FILE}.* 2>/dev/null | awk -F'.' 'NR==1 { print $NF }')
			;;
		gfwlist)
			echo $(ls ${GFWLIST_LATEST_FILE}.* 2>/dev/null | awk -F'.' 'NR==1 { print $NF }')
			;;
	esac
}

#resolve domain to ip
#$1: domain or hostname
resolve_server_ip() {
	local host=$1
	if echo $host|grep -E "^[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}$">/dev/null; then         
		hostip="$host"
	elif  [ "$host" != "${host#*:[0-9a-fA-F]}" ] ;then
		hostip="$host"
	else
		#hostip=$(ping "$host" -s 1 -c 1 | grep PING | cut -d'(' -f 2 | cut -d')' -f1)
		hostip=$(nslookup "$host" | grep -v \#53 | grep Address | sed s/[[:space:]]//g | awk -F ':' '{ print $2 }')
		if echo $hostip|grep -E "^[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}$">/dev/null; then
			hostip="$hostip"
		else
			hostip="127.0.0.1"
		fi
	fi
	echo "$hostip"
}

is_number() {
	expr $1 + 0 >/dev/null 2>&1 && return 0
	return 1
}

uci_get_by_name() {
	local ret=$(uci get $CONF_NAME.$1.$2 2>/dev/null)
	echo ${ret:=$3}
}

uci_set_by_name() {
	uci set $CONF_NAME.$1.$2="$3" 2>/dev/null
}

uci_delete_by_name() {
	uci delete $CONF_NAME.$1.$2 2>/dev/null
}

uci_add_list_by_name() {
	uci add_list $CONF_NAME.$1.$2="$3" 2>/dev/null
}

uci_commit() {
	uci commit $CONF_NAME
}

uci_get_by_type() {
	local ret=$(uci get $CONF_NAME.@$1[0].$2 2>/dev/null)
	echo ${ret:=$3}
}

# $1: name of ListValue (e.g.: nodes)
# $2: index of ListValue (e.g.: 1)
# $3: field of ListValue (e.g.: server)
# $4: default value
uci_get_by_index() {
	local ret=$(uci get $CONF_NAME.@$1[$2].$3 2>/dev/null)
	echo ${ret:=$4}
}

uci_bool_by_name() {
	case "$(uci_get_by_name $1 $2)" in
		1|on|true|yes|enabled) return 0;;
	esac
	return 1
}

# $1: index of nodes (e.g.: 0 or 1 or 2)
# $2: field of node (e.g.: server)
# $3: default value
get_node_value() {
	uci_get_by_index nodes $1 $2 $3
}

# $1: index of groups (e.g.: 0 or 1 or 2)
# $2: field of group (e.g.: cur_node)
# $3: default value
get_group_value() {
	uci_get_by_index groups $1 $2 $3
}

get_node_bool() {
	case "$(get_node_value $1 $2 0)" in
		1|on|true|yes|enabled) return 0;;
	esac
	return 1
}

get_group_bool() {
	case "$(get_group_value $1 $2 0)" in
		1|on|true|yes|enabled) return 0;;
	esac
	return 1
}

#$1 proxy_group_idx
get_proxy_port() {
	local proxy_group_idx=$1
	local proxy_port="nil"
	if [ "$proxy_group_idx" != "nil" ]; then
		get_group_bool $proxy_group_idx enable && proxy_port=$(get_group_value $proxy_group_idx redir_port nil)
	fi
	echo "$proxy_port"
}

#$1 dns_group_idx
get_dns_port() {
	local dns_group_idx=$1
	local dns_port="53"
	if [ "$dns_group_idx" != "nil" ]; then
		if (get_group_bool $dns_group_idx enable); then
			if (get_group_bool $dns_group_idx enable_remote_dns); then
				if (get_group_bool $dns_group_idx enable_tcp_dns); then
					dns_port=$(get_group_value $dns_group_idx tcp_dns_port)
				else
					dns_port=$(get_group_value $dns_group_idx tunnel_port)
				fi
			fi
		fi
	fi
	echo "$dns_port"
}

#$1 proxy_group_idx
#$2 "pol_", priority over lan
get_ipset_name() {
	local proxy_group_idx=$1
	local ipset_name=""
	local pol=$2
	case "$proxy_group_idx" in
		nil)
			#nil: 强制直连，绕过代理
			ipset_name="marsocket_dst_dns_bp"
			;;
		use_default_proxy)
			#用户各自指定的代理
			ipset_name="marsocket_dst_${pol}dns_fw"
			;;
		*)
			#规则指定的代理
			local port=$(get_proxy_port $proxy_group_idx)
			[ "$port" != "nil" ] && ipset_name="marsocket_dst_${pol}dns_fw_${port}"
			;;
	esac
	echo "$ipset_name"
}

get_server_ip_list() {
	local domain=$(uci_get_by_name $1 server)
	echo $(resolve_server_ip $domain)
}

get_local_port_list() {
	local cfg_name=$1 #cfgname of groups
	uci_bool_by_name $cfg_name enable && echo $(uci_get_by_name $cfg_name redir_port)	
}

get_lan_hosts() {
	local cfg_name=$1 #cfgname of lan_hosts
	uci_bool_by_name $cfg_name enable || return 0
	local macaddr=$(uci_get_by_name $cfg_name macaddr)
	local type=$(uci_get_by_name $cfg_name type)
	local proxy_group_idx=$(uci_get_by_name $cfg_name proxy_group_idx)
	local port=""
	if [ $proxy_group_idx = "nil" ]; then
		port=$RULES_LAN_PORT
	else
		port=$(get_proxy_port $proxy_group_idx)
	fi
	if [ "$port" = "nil" ]; then
		echo "b,${macaddr}"
	else
		echo "${type},${macaddr},${port}"
	fi
}

validate_node() {
	[ "$(uci get $CONF_NAME.@nodes[$1] 2>/dev/null)" = "nodes" ]
}

start_instance() {
	local cfg_name=$1	#cfgname of groups
	if !(uci_bool_by_name $cfg_name enable); then
		#auto_check disable $cfg_name
		return 0
	fi
	
	local switch_mode=$(uci_get_by_name $cfg_name switch_mode)
	local nodelist=$(uci_get_by_name $cfg_name nodelist)
	local nodelist_size=$(echo $nodelist | awk '{ print NF }')
	local timeout_list_file="/tmp/${CONF_NAME}.${cfg_name}.timeout_list"
	if [ "$switch_mode" != "balance" ]; then
		local cur_node=$(uci_get_by_name $cfg_name cur_node)
		if ! [ "$cur_node" -ge 1 2>/dev/null ]; then
			#auto_check disable $cfg_name
			return 0
		fi
		if ! [ "$nodelist_size" -ge "$cur_node" 2>/dev/null ]; then
			#auto_check disable $cfg_name
			return 0
		fi
		nodelist=$(echo $nodelist | awk '{ print $i }' i=$cur_node)
	else
		if ! [ "$nodelist_size" -ge 1 2>/dev/null ]; then
			#auto_check disable $cfg_name
			return 0
		fi
		touch "$timeout_list_file"
	fi

	[ "$switch_mode" != "manual" ] && auto_check enable $cfg_name
	for node_idx in $nodelist; do
		if [ "$switch_mode" = "balance" ]; then
			grep "\<$node_idx\>" "$timeout_list_file" >/dev/null 2>&1 && continue
		fi
		validate_node $node_idx || continue
		local server_address=$(resolve_server_ip $(get_node_value $node_idx server))
		local server_port=$(get_node_value $node_idx server_port)
		local password=$(get_node_value $node_idx password)
		local key=$(get_node_value $node_idx key)
		local encrypt_method=$(get_node_value $node_idx encrypt_method)
		local plugin=$(get_node_value $node_idx plugin)
		local plugin_opts=$(get_node_value $node_idx plugin_opts)
		local timeout=$(get_node_value $node_idx timeout 60)
		local reuse_port_count=$(uci_get_by_name $cfg_name reuse_port_count 1)
		for _ in $(seq $reuse_port_count); do
			procd_open_instance
			procd_set_param respawn
			procd_set_param stdout 1
			procd_set_param stderr 1
			procd_set_param command $REDIR_BIN
			procd_append_param command "-l" "$(uci_get_by_name $cfg_name redir_port 1234)"
			procd_append_param command "-s" "$server_address"
			procd_append_param command "-p" "$server_port"
			procd_append_param command "-m" "$encrypt_method"
			if [ -n "$key" ]; then procd_append_param command "--key" "$key"
			elif [ -n "$password" ]; then
				procd_append_param command "-k" "$password"
			fi
			[ -n "$plugin" ] && procd_append_param command "--plugin" "$plugin"
			[ -n "$plugin_opts" ] && procd_append_param command "--plugin-opts" "$plugin_opts"
			get_node_bool $node_idx fast_open && procd_append_param command "--fast-open"
			get_node_bool $node_idx no_delay && procd_append_param command "--no-delay"
			procd_append_param command "-t" "$timeout"
			procd_append_param command "-b" "0.0.0.0"		
			procd_append_param command "--mtu" "$(uci_get_by_name $cfg_name redir_mtu 1492)"
			procd_append_param command "--reuse-port"
			procd_append_param command "-u"
			procd_close_instance
		done
	done

	uci_bool_by_name $cfg_name enable_remote_dns || return 0
	local tunnel_port=$(uci_get_by_name $cfg_name tunnel_port 1234)
	procd_open_instance
	procd_set_param respawn
	procd_set_param stdout 1
	procd_set_param stderr 1
	procd_set_param command $TUNNEL_BIN
	procd_append_param command "-l" "$tunnel_port"	
	procd_append_param command "-s" "$server_address"
	procd_append_param command "-p" "$server_port"
	procd_append_param command "-m" "$encrypt_method"
	if [ -n "$key" ]; then
		procd_append_param command "--key" "$key"
	elif [ -n "$password" ]; then
		procd_append_param command "-k" "$password"
	fi
	[ -n "$plugin" ] && procd_append_param command "--plugin" "$plugin"
	[ -n "$plugin_opts" ] && procd_append_param command "--plugin-opts" "$plugin_opts"
	get_node_bool $node_idx fast_open && procd_append_param command "--fast-open"
	get_node_bool $node_idx no_delay && procd_append_param command "--no-delay"
	procd_append_param command "-t" "$timeout"
	procd_append_param command "-b" "127.0.0.1"
	procd_append_param command "--mtu" "$(uci_get_by_name $cfg_name redir_mtu 1492)"
	procd_append_param command "-L" "$(uci_get_by_name $cfg_name remote_dns_servers 8.8.8.8):$(uci_get_by_name $cfg_name remote_dns_port 53)"
	procd_append_param command "-u"
	procd_close_instance

	uci_bool_by_name $cfg_name enable_tcp_dns || return 0
	procd_open_instance
	procd_set_param respawn
	procd_set_param stdout 1
	procd_set_param stderr 1
	procd_set_param command $TCPDNS_BIN
	procd_append_param command "-p" "$(uci_get_by_name $cfg_name tcp_dns_port 5353)"	
	procd_append_param command "-b" "127.0.0.1"
	procd_append_param command "-s" "127.0.0.1:${tunnel_port}"
	procd_close_instance
}






generate_gfwlist_conf() {
	local cfg_name=$1 #cfgname is "rules_gfwlist"
	local md5=$(get_md5 gfwlist)
	if [ -n "$md5" ]; then
		local dns_group_idx=$(uci_get_by_type $cfg_name dns_group_idx nil)
		local proxy_group_idx=$(uci_get_by_type $cfg_name proxy_group_idx nil)
		local dns_port=$(get_dns_port $dns_group_idx)
		local ipset_name=$(get_ipset_name $proxy_group_idx)
		$GFWLIST_BIN --gfwlist-file "${GFWLIST_LATEST_FILE}.${md5}" --port "$dns_port" --ipset "$ipset_name" --output-file "$TEMP_GFWLIST_RULES_FILE" >/dev/null
	fi
}

generate_apnic_iplist() {
	local cfg_name=$1 #cfgname of rules_iplist
	local md5=$(get_md5 apnic)
	if [ -n "$md5" ]; then
		local country=$(uci_get_by_name $cfg_name country)
		local destfile="${IPLIST_CONF_PATH}/${country}.${md5}"
		if [ ! -f $destfile ]; then 
			for f in $(ls ${IPLIST_CONF_PATH}/${country}.* 2>/dev/null); do	
				[ -f "$f" ] && rm "$f"
			done
			echo ${APNIC_LATEST_FILE}.${md5}
			echo $destfile
			$APNIC_BIN --code "$country" --apnic-file "${APNIC_LATEST_FILE}.${md5}" --output-file "$destfile" >/dev/null
		fi
	fi
}

add_dnsmasq_rules() {
	local cfg_name=$1 #cfgname of rules_domain
	local filename=$TEMP_DNSMASQ_CONF_FILE
	local dns_group_idx=$(uci_get_by_name $cfg_name dns_group_idx nil)
	local proxy_group_idx=$(uci_get_by_name $cfg_name proxy_group_idx nil)	
	local dns_port=$(get_dns_port $dns_group_idx)
	local domain=$(uci_get_by_name $cfg_name domain)
	echo "server=/${domain}/127.0.0.1#${dns_port}" >> "$filename"
	if [ "$(uci_get_by_name $cfg_name allow_rebind)" = "1" ]; then
		local ipset_name=$(get_ipset_name $proxy_group_idx "pol_")
		[ -n "$ipset_name" ] && echo "ipset=/${domain}/${ipset_name}" >> "$filename"
		echo "rebind-domain-ok=/${domain}/" >> "$filename"
	else
		local ipset_name=$(get_ipset_name $proxy_group_idx)
		echo "ipset=/${domain}/${ipset_name}" >> "$filename"
	fi
}

generate_dnsmasq_conf() {
	local mode=$1
	rm -f "$TEMP_GFWLIST_RULES_FILE" "$TEMP_DNSMASQ_CONF_FILE"
	generate_gfwlist_conf rules_gfwlist
	config_foreach add_dnsmasq_rules rules_domain
	local ret="0"
	compare_md5 $GFWLIST_RULES_FILE $TEMP_GFWLIST_RULES_FILE || ret="1"
	compare_md5 $DNSMASQ_CONF_FILE $TEMP_DNSMASQ_CONF_FILE || ret="1"
	if ! (grep "$DNSMASQ_CONF_ADD_LINE" "$DNSMASQ_CONF" >/dev/null 2>&1); then
		echo "$DNSMASQ_CONF_ADD_LINE" >> "$DNSMASQ_CONF"
		ret="1"
	fi
	if [ "$ret" != "0" ] && [ "$mode" != "debug" ]; then
		restart_dnsmasq
	fi
}

generate_rules_iplist() {
	local cfg_name=$1 #cfgname of rules_iplist

	#checking need generate files ...
	generate_apnic_iplist $cfg_name	

	local md5=$(get_md5 apnic)
	if [ -n "$md5" ]; then
		local country=$(uci_get_by_name $cfg_name country)
		local proxy_group_idx=$(uci_get_by_name $cfg_name proxy_group_idx nil)
		case "$proxy_group_idx" in
			nil) 
				RULES_WAN_BP_LIST="${RULES_WAN_BP_LIST} ${IPLIST_CONF_PATH}/${country}.${md5}"
				;;
			use_default_proxy)
				RULES_WAN_FW_LIST="${RULES_WAN_FW_LIST} ${IPLIST_CONF_PATH}/${country}.${md5}"
				;;
			*)
				local port=$(get_proxy_port $proxy_group_idx)
				[ "$port" != "nil" ] && RULES_WAN_FW_LIST="${RULES_WAN_FW_LIST} ${IPLIST_CONF_PATH}/${country}.${md5},${port}"
				;;
		esac
	fi
}

generate_rules_ip() {
	local cfg_name=$1 #cfgname of rules_ip
	local net=$(uci_get_by_name $cfg_name net)
	local proxy_group_idx=$(uci_get_by_name $cfg_name proxy_group_idx nil)
	if [ -n "$net" ]; then
		case "$proxy_group_idx" in
			nil) 
				RULES_WAN_BP_IPS="${RULES_WAN_BP_IPS} ${net}"
				;;
			use_default_proxy)
				RULES_WAN_FW_IPS="${RULES_WAN_FW_IPS} ${net}"
				;;
			*)
				local port=$(get_proxy_port $proxy_group_idx)
				[ "$port" != "nil" ] && RULES_WAN_FW_IPS="${RULES_WAN_FW_IPS} ${net},${port}"
				;;
		esac
	fi	
}

enable_rules() {
	local local_port_list=$(config_foreach get_local_port_list groups)
	[ -n "$local_port_list" ] || return 0

	RULES_WAN_BP_LIST=""
	RULES_WAN_BP_IPS=""
	RULES_WAN_FW_LIST=""
	RULES_WAN_FW_IPS=""
	RULES_LAN_PORT=""

	config_foreach generate_rules_iplist rules_iplist
	config_foreach generate_rules_ip rules_ip

	local lan_type=$(uci_get_by_type lan type)
	local lan_proxy_group_idx=$(uci_get_by_type lan proxy_group_idx nil)
	local lan_target=""
	RULES_LAN_PORT=$(get_proxy_port $lan_proxy_group_idx)
	if [ "$RULES_LAN_PORT" = "nil" ]; then
		lan_target="b"
	else		
		lan_target="${lan_type},${RULES_LAN_PORT}"
	fi

	local localhost_type=$(uci_get_by_type local_host type)
	local localhost_proxy_group_idx=$(uci_get_by_type local_host proxy_group_idx nil)
	local localhost_port=""
	local output_target=""
	if [ "$localhost_proxy_group_idx" = "nil" ]; then
		localhost_port=$RULES_LAN_PORT
	else
		localhost_port=$(get_proxy_port $localhost_proxy_group_idx)
	fi
	if [ "$localhost_port" = "nil" ]; then
		output_target="b"
	else
		output_target="${localhost_type},${localhost_port}"
	fi

	$RULES_BIN \
		--server-ip-list "$(config_foreach get_server_ip_list nodes | sort | uniq)" \
		--local-port-list "$local_port_list" \
		--bypassed-iplist-file "$RULES_WAN_BP_LIST" \
		--bypassed-iplist "$RULES_WAN_BP_IPS" \
		--forwarded-iplist-file "$RULES_WAN_FW_LIST" \
		--forwarded-iplist "$RULES_WAN_FW_IPS" \
		--ifname-list "$(uci_get_by_type lan lan_ifaces)" \
		--target "$lan_target" \
		--output "$output_target" \
		--lan_hosts "$(config_foreach get_lan_hosts lan_hosts)" \
		--udp-relay

	#generate dnsmasq of last
	generate_dnsmasq_conf
	return 0
}

auto_check_enabled() {
	local cfg_name=$1	#cfgname of groups
	local cmd="/usr/bin/${CHECK_BIN}"
	[ -n "$cfg_name" ] && cmd="${cmd} ${cfg_name}"
	local num=$(grep -n "$cmd" "$CRONTABS_CONF" | awk -F':' '{ print $1 }')
	if [ -n "$num" ]; then
		echo "$num"
		return 0
	fi
	return 1
}

auto_check() {
	local arg=$1
	case $arg in
		enable)
			local cfg_name=$2	#cfgname of groups
			[ -z "$cfg_name" ] && return 1
			if !(auto_check_enabled $cfg_name >/dev/null); then
				local switch_mode=$(uci_get_by_name $cfg_name switch_mode)
				local test_interval=$(uci_get_by_name $cfg_name test_interval)
				echo "*/${test_interval} * * * * /usr/bin/${CHECK_BIN} ${cfg_name} >> /var/log/marsocket_check.${cfg_name}.log 2>&1" >> "$CRONTABS_CONF"
			fi
			;;
		disable)
			local cfg_name=$2	#cfgname of groups
			local num=$(auto_check_enabled $cfg_name)
			local count=0
			for n in $num; do
				local c=$(expr $n - $count 2>/dev/null)
				if (is_number "$c"); then
					sed -i "${c}d" "$CRONTABS_CONF"
					count=$(expr $count + 1 2>/dev/null)
				fi
			done
			;;
	esac
	return 0
}

auto_update() {
	local arg=$1
	case $arg in
		enable | disable)
			local num=$(grep -n "/usr/bin/${APNIC_BIN} --download" "$CRONTABS_CONF" | awk -F':' '{ print $1 }')
			if [ -n "$num" ]; then
				sed -i "${num}d" "$CRONTABS_CONF" 
			fi
			local num=$(grep -n "/usr/bin/${GFWLIST_BIN} --download" "$CRONTABS_CONF" | awk -F':' '{ print $1 }')
			if [ -n "$num" ]; then
				sed -i "${num}d" "$CRONTABS_CONF" 
			fi
			if [ "$arg" = "enable" ]; then
				local w=$(uci_get_by_type general auto_update_weekday nil)
				local h=$(uci_get_by_type general auto_update_hours 4)
				local m=$(uci_get_by_type general auto_update_minutes 0)
				[ "$w" = "nil" ] && w="*"
				local cnf="${m} ${h} * * ${w}"
				echo "${cnf} /usr/bin/${APNIC_BIN} --download --output-file \"${APNIC_LATEST_FILE}\" >> /var/log/update_apnic.log 2>&1" >> "$CRONTABS_CONF"
				echo "${cnf} /usr/bin/${GFWLIST_BIN} --download --output-file \"${GFWLIST_LATEST_FILE}\" >> /var/log/update_gfwlist.log 2>&1" >> "$CRONTABS_CONF"
			fi
			return 0
			;;
		*)
			cat <<-EOF
Syntax: /etc/init.d/marsocket auto_update [command]"

Available commands:
        enable    Enable iptables rules
        disable	  Disable iptables rules
EOF
			;;
	esac
}

configure() {
	local mode=$1 #can set $1 is "debug"
	check_depends || return 1
	config_load "$CONF_NAME"
	config_foreach generate_apnic_iplist rules_iplist
	generate_dnsmasq_conf $mode
	return 0
}

rules() {
	local arg=$1
	case $arg in
		enable)
			local mode=$2
			if [ "$mode" != "start_service" ]; then
				check_depends || return 1
				config_load "$CONF_NAME"
			fi
			enable_rules 
			;;
		disable)
			command -v "$RULES_BIN" >/dev/null && $RULES_BIN --flush
			local num=$(grep -n "$DNSMASQ_CONF_ADD_LINE" "$DNSMASQ_CONF" | awk -F':' '{ print $1 }')
			if [ -n "$num" ]; then
				sed -i "${num}d" "$DNSMASQ_CONF" 
				restart_dnsmasq
			fi
			;;
		*)
			cat <<-EOF
Syntax: /etc/init.d/marsocket rules [command]"

Available commands:
        enable    Enable iptables rules
        disable	  Disable iptables rules
EOF
			;;
	esac
	return 0
}

start_service() {
	check_depends || return 1
	#disable all auto_check
	auto_check disable
	config_load "$CONF_NAME"
	config_foreach start_instance groups
	rules enable "start_service"
	auto_update enable
}

stop_service() {
	auto_update disable
	auto_check disable
	rules disable
	rm -f /tmp/${CONF_NAME}.*.timeout_list
}

service_triggers() {
	procd_add_reload_trigger $CONF_NAME
}
