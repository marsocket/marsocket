#!/bin/sh
#
# Copyright (C) 2019 marsocket <marsocket@gmail.com>
# This is free software, licensed under the GNU General Public License v3.

usage() {
	cat <<-EOF
		Usage: "$0" [options]
		Valid options are:
            -h, --help    Show this help message and exit
            -f, --gfwlist-file <FILE>
                          Local gfwlist file by base64
                          (If not given, will be downloaded online.)
            -d, --dns <dns_ip>
                          DNS IP address for the GfwList Domains (Default: 127.0.0.1)	                
            -p, --port <local_dns_port>
                          Local DNS Port for the GfwList Domains (Default: 5353)
            -s, --ipset <ipset_name>
                          Ipset name for the GfwList domains
                          (If not given, ipset rules will not be generated.)
            -o, --output-file <FILE> 
                          /path/to/output_filename
            --update      Update gfwlist from github.com.
                          --gfwlist-file is a required parameter.
EOF
	exit $1
}

get_args() {
	UPDATE=""
    GFWLIST_BASE64_FILE=''
    DNS_IP='127.0.0.1'
    DNS_PORT='5353'
    IPSET_NAME=''
    while [ ${#} -gt 0 ]; do
        case "${1}" in
            --help | -h | -v)
                usage 0
                ;;
			--update)
				UPDATE="1"
				;;
            --gfwlist-file | -f)
                GFWLIST_BASE64_FILE=$2
                shift
                ;;
            --dns | -d)
                DNS_IP="$2"
                shift
                ;;                
            --port | -p)
                DNS_PORT="$2"
                shift
                ;;
            --ipset | -s)
                IPSET_NAME="$2"
                shift
                ;;
            --output-file | -o)
                OUT_FILE="$2"
                shift
                ;;
            *)
                echo "Invalid argument: $1"
                usage 1
                ;;
        esac
        shift 1
    done

	local logtime=$(date "+%Y-%m-%d")
	if [ "$UPDATE" = "1" ]; then
		if [ -z "$GFWLIST_BASE64_FILE" ]; then
			echo '['$logtime'] Error: Update gfwlist from github.com. --gfwlist-file is a required parameter.\n'
			exit 1
		fi
	else 
		# Check path & file name
		if [ -z $OUT_FILE ]; then
			echo '['$logtime'] Error: Please specify the path to the output file(using -o/--output argument).\n'
			exit 1
		else
			if [ -z ${OUT_FILE##*/} ]; then
				echo '['$logtime'] Error: '$OUT_FILE' is a path, not a file.\n'
				exit 1
			else
				if [ ${OUT_FILE}a != ${OUT_FILE%/*}a ] && [ ! -d ${OUT_FILE%/*} ]; then
					echo '['$logtime'] Error: Folder do not exist: '${OUT_FILE%/*}'\n'
					exit 1
				fi
			fi
		fi 
	fi
}

main() {
    [ -z "$1" ] && usage 0
    get_args "$@"
	if [ "$UPDATE" = "1" ]; then
		local logtime=$(date "+%Y-%m-%d")
		local tmpfile="/tmp/gfwlist-latest.${logtime}"
		#local url="https://github.com/gfwlist/gfwlist/raw/master/gfwlist.txt"
		local url="https://raw.githubusercontent.com/gfwlist/gfwlist/master/gfwlist.txt"
		echo '['$logtime'] Updating gfwlist from github.com ...'
		curl -s -L --insecure -o $tmpfile $url
		if [ $? -ne 0 ]; then
			echo '['$logtime'] Updating failed.'
			exit 1	
		fi
		for f in $(ls ${GFWLIST_BASE64_FILE}.* 2>/dev/null); do	
			[ -f "$f" ] && rm "$f"
		done
		local md5=$(md5sum "$tmpfile" | awk '{ print $1 }')
		mv "$tmpfile" "${GFWLIST_BASE64_FILE}.${md5}"
		echo '['$logtime'] Update completed. md5: '$md5
		exit 0
	else
   		/usr/bin/gfwlist2dnsmasq.sh -f "$GFWLIST_BASE64_FILE" -d "$DNS_IP" -p "$DNS_PORT" -s "$IPSET_NAME" -o "$OUT_FILE"
	fi
    [ "$?" == "0" ] || exit 1
    exit 0
}

main "$@"

