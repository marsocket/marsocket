#!/bin/sh
#
# Copyright (C) 2019 marsocket <marsocket@gmail.com>
# This is free software, licensed under the GNU General Public License v3.

CONF_NAME="marsocket"
SOCKS5_BIN="ss-local"

log() {
	local logtext=$1
	local logtime=$(date "+%Y-%m-%d %H:%M:%S")
	echo "[${logtime}] ${logtext}"
}

#resolve domain to ip
#$1: domain or hostname
resolve_server_ip() {
	local host=$1
	if echo $host|grep -E "^[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}$">/dev/null; then         
		hostip="$host"
	elif  [ "$host" != "${host#*:[0-9a-fA-F]}" ] ;then
		hostip="$host"
	else
		#hostip=$(ping "$host" -s 1 -c 1 | grep PING | cut -d'(' -f 2 | cut -d')' -f1)
		hostip=$(nslookup "$host" | grep -v \#53 | grep Address | sed s/[[:space:]]//g | awk -F ':' '{ print $2 }')
		if echo $hostip|grep -E "^[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}$">/dev/null; then
			hostip="$hostip"
		else
			hostip="127.0.0.1"
		fi
	fi
	echo "$hostip"
}

is_number() {
	expr $1 + 0 >/dev/null 2>&1 && return 0
	return 1
}

uci_get_by_name() {
	local ret=$(uci get $CONF_NAME.$1.$2 2>/dev/null)
	echo ${ret:=$3}
}

uci_set_by_name() {
	uci set $CONF_NAME.$1.$2="$3" 2>/dev/null
}

uci_delete_by_name() {
	uci delete $CONF_NAME.$1.$2 2>/dev/null
}

uci_add_list_by_name() {
	uci add_list $CONF_NAME.$1.$2="$3" 2>/dev/null
}

uci_get_by_type() {
	local ret=$(uci get $CONF_NAME.@$1[0].$2 2>/dev/null)
	echo ${ret:=$3}
}

uci_commit() {
	uci commit $CONF_NAME
}

# $1: name of ListValue (e.g.: nodes)
# $2: index of ListValue (e.g.: 1)
# $3: field of ListValue (e.g.: server)
# $4: default value
uci_get_by_index() {
	local ret=$(uci get $CONF_NAME.@$1[$2].$3 2>/dev/null)
	echo ${ret:=$4}
}

uci_bool_by_name() {
	case "$(uci_get_by_name $1 $2)" in
		1|on|true|yes|enabled) return 0;;
	esac
	return 1
}

# $1: index of nodes (e.g.: 0 or 1 or 2)
# $2: field of node (e.g.: server)
# $3: default value
get_node_value() {
	uci_get_by_index nodes $1 $2 $3
}

# $1: index of groups (e.g.: 0 or 1 or 2)
# $2: field of group (e.g.: cur_node)
# $3: default value
get_group_value() {
	uci_get_by_index groups $1 $2 $3
}

get_node_bool() {
	case "$(get_node_value $1 $2 0)" in
		1|on|true|yes|enabled) return 0;;
	esac
	return 1
}

get_group_bool() {
	case "$(get_group_value $1 $2 0)" in
		1|on|true|yes|enabled) return 0;;
	esac
	return 1
}

validate_node() {
	[ "$(uci get $CONF_NAME.@nodes[$1] 2>/dev/null)" = "nodes" ]
}

reload() {
	/etc/init.d/$CONF_NAME reload
}

check_group() {
	local cfg_name=$1	#cfgname of groups
	#auto_test_enabled $cfg_name >/dev/null || return 0
	uci_bool_by_name $cfg_name enable || return 0
	local switch_mode=$(uci_get_by_name $cfg_name switch_mode)
	local redir_mtu=$(uci_get_by_name $cfg_name redir_mtu 1492)
	local test_port=$(uci_get_by_name $cfg_name test_port 65300)
	local test_url=$(uci_get_by_name $cfg_name test_url)
	local nodelist=$(uci_get_by_name $cfg_name nodelist)
	local nodelist_size=$(echo $nodelist | awk '{ print NF }')
	if [ "$switch_mode" != "balance" ]; then
		local cur_node=$(uci_get_by_name $cfg_name cur_node)
		[ "$cur_node" -ge 1 2>/dev/null ] || return 0
		[ "$nodelist_size" -ge "$cur_node" 2>/dev/null ] || return 0
		[ "$nodelist_size" -ge 2 2>/dev/null ] || return 0
		local cur_node_idx=$(echo $nodelist | awk '{ print $i }' i=$cur_node)
		log "starting test,  mode: ${switch_mode} ..."
		local cur=$(check_node $cfg_name $cur_node $cur_node_idx $test_port $redir_mtu $test_url)
		local cur_speed=$(echo $cur | awk -F',' '{ print $1 }')
		local cur_node_name=$(get_node_value $cur_node_idx alias)
		log "cur_node:${cur_node_name}, speed:${cur_speed}"
		case $switch_mode in
			auto)
				local sortlist=$(local list_idx=0; for node_idx in $nodelist; do list_idx=$(expr $list_idx + 1); [ "$list_idx" != "$cur_node" ] && check_node $cfg_name $list_idx $node_idx $test_port $redir_mtu $test_url; done | sort)
				for data in $sortlist; do 
					local idx=$(echo $data | awk -F',' '{ print $2 }')
					local alias=$(get_node_value $idx alias)
					local speed=$(echo $data | awk -F',' '{ print $1 }')
					log "node:${alias}, speed:${speed}"
				done
				local first=$(echo $sortlist | awk '{ print $1 }')
				local first_speed=$(echo $first | awk -F',' '{ print $1 }')
				local first_node_idx=$(echo $first | awk -F',' '{ print $2 }')
				local first_node=$(echo $first | awk -F',' '{ print $3 }')
				log "finished test."
				[ "$first_speed" = "timeout" ] && return 0
				local test_tolerance=$(uci_get_by_name $cfg_name test_tolerance 100)
				if [ "$cur_speed" = "timeout" ] || [ $(expr $cur_speed - $first_speed 2>/dev/null) -ge $test_tolerance 2>/dev/null ]; then
					local first_alias=$(get_node_value $first_node_idx alias); 
					log "node switch to: ${first_alias}"
					#auto_test_enabled $cfg_name >/dev/null || return 0
					uci_set_by_name $cfg_name cur_node "$first_node" && uci_commit && reload
				fi
				;;
			fallback)
				if [ "$cur_speed" != "timeout" ]; then
					log "finished test."
					return 0
				fi
				local next_node=$(expr $cur_node + 1 2>/dev/null)
				[ -z "$next_node" ] && log "finished test." && return 0
				[ "$next_node" -gt "$nodelist_size" 2>/dev/null ] && next_node="1"
				while [ "$next_node" != "$cur_node" ]; do		
					local next_node_idx=$(echo $nodelist | awk '{ print $i }' i=$next_node)
					local next=$(check_node $cfg_name $next_node $next_node_idx $test_port $redir_mtu $test_url)
					local next_alias=$(get_node_value $next_node_idx alias)
					local next_speed=$(echo $next | awk -F',' '{ print $1 }')	
					log "node:${next_alias}, speed:${next_speed}"
					if [ "$next_speed" != "timeout" ]; then
						log "finished test."
						log "node switch to: ${next_alias}"
						#auto_test_enabled $cfg_name >/dev/null || return 0
						uci_set_by_name $cfg_name cur_node "$next_node" && uci_commit && reload
						break
					fi
					next_node=$(expr $next_node + 1 2>/dev/null)
					[ -z "$next_node" ] && log "finished test." && return 0
					[ "$next_node" -gt "$nodelist_size" 2>/dev/null ] && next_node="1"
				done
				;;
		esac
	else
		[ "$nodelist_size" -ge 2 2>/dev/null ] || return 0
		local timeout_list_file="/tmp/${CONF_NAME}.${cfg_name}.timeout_list"
		log "starting test,  mode: ${switch_mode} ..."
		local retlist=$(local list_idx=0; for node_idx in $nodelist; do list_idx=$(expr $list_idx + 1); check_node $cfg_name $list_idx $node_idx $test_port $redir_mtu $test_url; done)
		for data in $retlist; do 
			local idx=$(echo $data | awk -F',' '{ print $2 }')
			local alias=$(get_node_value $idx alias)
			local speed=$(echo $data | awk -F',' '{ print $1 }')
			log "node:${alias}, speed:${speed}"
		done
		log "finished test."
		retlist=$(echo "$retlist" | grep "timeout")
		local timeout_list=$(for ret in $retlist; do echo $ret | awk -F',' '{ print $2 }'; done)
		#if [ $(auto_test_enabled $cfg_name >/dev/null) ]; then
			if [ -n "$timeout_list" ]; then
				echo "$timeout_list" > "$timeout_list_file"
				reload
			else
				if [ -s "$timeout_list_file" ]; then
					> "$timeout_list_file"
					reload
				fi
			fi 
		#fi	
	fi
	return 0
}

check_node() {
	local cfg_name=$1	#cfgname of groups
	local list_idx=$2
	local node_idx=$3
	local port=$4
	local mtu=$5
	local url=$6
	validate_node $node_idx || return 1
	local curlshow="%{http_code},%{time_starttransfer}"
	local server_address=$(resolve_server_ip $(get_node_value $node_idx server))
	local server_port=$(get_node_value $node_idx server_port)
	local password=$(get_node_value $node_idx password)
	local key=$(get_node_value $node_idx key)
	local encrypt_method=$(get_node_value $node_idx encrypt_method)
	local plugin=$(get_node_value $node_idx plugin)
	local plugin_opts=$(get_node_value $ode_idx plugin_opts)
	local timeout=$(get_node_value $node_idx timeout 60)
	local k="-k ${password}"
	[ -n "$key" ] && k="--key ${key}" 
	$SOCKS5_BIN -l "$port" \
		-s "$server_address" \
		-p "$server_port" \
		-m "$encrypt_method" \
		--mtu "$mtu" \
		$k \
		-b 127.0.0.1 -t 60 -u --reuse-port --fast-open --no-delay \
		-f "/var/run/${SOCKS5_BIN}-${cfg_name}.pid" >/dev/null 2>&1
	sleep 1
	local ret_value=""
	ret_value=$(curl -x socks5h://127.0.0.1:$port --insecure --head --connect-timeout 2 -m 3 -s -L -o /dev/null -w "$curlshow" "$url" 2>/dev/null)
	local ret="$?"
	kill -9 $(cat "/var/run/${SOCKS5_BIN}-${cfg_name}.pid" 2>/dev/null) >/dev/null 2>&1
	local httpcode=$(echo $ret_value | awk -F',' '{ print $1 }')
	local speed=$(echo $ret_value | awk -F',' '{ print $2 }')
	if [ "$ret" != "0" ] || [ $httpcode -eq 0 ] || [ -z "$speed" ]; then 
		echo "timeout,${node_idx},${list_idx}"
		return 1
	fi
	if [ $httpcode -ne 200 ] && [ $httpcode -ne 204 ]; then
		echo "timeout,${node_idx},${list_idx}"
		return 1
	fi
	local a=$(echo $speed | awk -F'.' '{ print $1 }')
	local b=$(echo $speed | awk -F'.' '{ print $2 }')	
	speed=$([ $a -gt 0 2>/dev/null ] && echo $a${b:0:3} || echo $(expr ${b:0:3} + 0 2>/dev/null))
	if [ "$?" != "0" ] || [ -z "$speed" ]; then
		echo "timeout,${node_idx},${list_idx}"
		return 1
	fi
	echo "${speed},${node_idx},${list_idx},${ret}"
}

main() {
	command -v "$SOCKS5_BIN" >/dev/null || exit 1
	local cfg_name=$1	#cfgname of groups
	[ -z "$cfg_name" ] && exit 1
	local test_port=$(uci_get_by_name $cfg_name test_port 65300)
	ps | grep "${SOCKS5_BIN} -l ${test_port}" | grep -v grep >/dev/null 2>&1 && exit 0
	#ps | grep "marsocket-check ${cfg_name}" | grep -v grep >/dev/null 2>&1 && exit 0
	check_group $cfg_name
}

main "$@"
